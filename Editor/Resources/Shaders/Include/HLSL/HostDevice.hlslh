#pragma once
#include <Common.slh>

// Information of a obj model when referenced in a shader
struct ObjDesc
{
	uint VertexBufferIndex;
	uint IndexBufferIndex;
	uint FirstVertex;
	uint FirstIndex;

	uint MaterialIndex;
	uint TransformIndex;
	uint2 Padding;
};

// Push constant structure for the ray tracer
struct PushConstantRay
{
	uint Frame;
	float SkyBoxLod;
	float SkyBoxIntensity;
};

struct Vertex
{
	float3 Position;
	float3 Normal;
	float3 Tangent;
	float3 Binormal;
	float2 TexCoord;
};

struct Material
{
	// 16-byte aligned members
	float4 AlbedoColor;

	// 12-byte aligned float3, followed by 4-byte members to avoid padding
	float3 SpecularColor; // 12 bytes, aligned to 16 bytes
	float Specular;     // 4 bytes (fills the padding after SpecularColor)

	float3 AttenuationColor;     // 12 bytes, aligned to 16 bytes
	float AttenuationDistance; // 4 bytes (fills the padding after AttenuationColor)

	float3 SheenColor;      // 12 bytes, aligned to 16 bytes
	float SheenRoughness; // 4 bytes (fills the padding after SheenColor)

	// 8-byte aligned members
	float Roughness; // 8 bytes, aligned to 8 bytes
	float Metalness; // 4 bytes, aligned to 4 bytes
	float Emission;  // 4 bytes, aligned to 4 bytes
	bool UseNormalMap;      // 4 bytes, aligned to 4 bytes

	uint AlbedoTexIndex;    // 4 bytes, aligned to 4 bytes
	uint NormalTexIndex;    // 4 bytes, aligned to 4 bytes
	uint RoughnessTexIndex; // 4 bytes, aligned to 4 bytes
	uint ClearcoatTexIndex;    // 4 bytes, aligned to 4 bytes

	uint TransmissionTexIndex; // 4 bytes, aligned to 4 bytes
	uint MetalnessTexIndex;    // 4 bytes, aligned to 4 bytes
	uint EmissionTexIndex;     // 4 bytes, aligned to 4 bytes
	float IOR;                 // 4 bytes, aligned to 4 bytes

	float Transmission;        // 4 bytes, aligned to 4 bytes
	float Thickness;           // 4 bytes, aligned to 4 bytes
	float Clearcoat;          // 4 bytes, aligned to 4 bytes
	float ClearcoatRoughness; // 4 bytes, aligned to 4 bytes

	float Iridescence;        // 4 bytes, aligned to 4 bytes
	float IridescenceIor;     // 4 bytes, aligned to 4 bytes
	float IridescenceThickness; // 4 bytes, aligned to 4 bytes
	uint Flags;                 // 4 bytes, aligned to 4 bytes
};

// struct Material
// {
// 	// float4 AlbedoColor;

// 	// float Metalness;
// 	// float Roughness;
// 	// float Emission;
// 	// float EnvMapRotation;

// 	bool UseNormalMap;
// 	uint AlbedoTexIndex;
// 	uint NormalTexIndex;
// 	uint RoughnessTexIndex;

// 	uint MetalnessTexIndex;
// 	float IOR;
// 	uint Flags; // Not sure this is currently set correctly
// 	float Padding;
// };

enum MaterialFlag
{
	None = BIT(0),
	DepthTest = BIT(1),
	Blend = BIT(2),
	Translucent = BIT(3),
	TwoSided = BIT(4),
	DisableShadowCasting = BIT(5)
};
