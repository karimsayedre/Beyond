#pragma once
#include <Common.slh>

// Generate a random unsigned int from two unsigned int values, using 16 pairs
// of rounds of the Tiny Encryption Algorithm. See Zafar, Olano, and Curtis,
// "GPU Random Numbers via the Tiny Encryption Algorithm"
uint tea(uint val0, uint val1)
{
	uint v0 = val0;
	uint v1 = val1;
	uint s0 = 0;

	for (uint n = 0; n < 16; n++)
	{
		s0 += 0x9e3779b9;
		v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
		v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
	}

	return v0;
}

uint initRNG(uint2 pixelCoords, uint2 resolution, uint frameNumber, uint sampleIndex)
{
	uint seed = pixelCoords.x + pixelCoords.y * resolution.y;
	seed += frameNumber * resolution.x * resolution.y;          // Assume 1080 is max height
	seed += sampleIndex * resolution.x * resolution.y * 500000; // Assume max 1000 frames
	return seed;
}

// Generate a random unsigned int in [0, 2^24) given the previous RNG state
// using the Numerical Recipes linear congruential generator
uint lcg(inout uint prev)
{
	uint LCG_A = 1664525u;
	uint LCG_C = 1013904223u;
	prev = (LCG_A * prev + LCG_C);
	return prev & 0x00FFFFFF;
}

// Generate a random float in [0, 1) given the previous RNG state
float rnd(inout uint prev)
{
	return (float(lcg(prev)) / float(0x01000000));
}

uint RandomInt(inout uint seed)
{
	// LCG values from Numerical Recipes
	return (seed = mad(1664525, seed, 1013904223));
}

float RandomFloat(inout uint seed)
{
	//// Float version using bitmask from Numerical Recipes
	//const uint one = 0x3f800000;
	//const uint msk = 0x007fffff;
	//return uintBitsToFloat(one | (msk & (RandomInt(seed) >> 9))) - 1;

	// Faster version from NVIDIA examples; quality good enough for our use case.
	return (float(RandomInt(seed) & 0x00FFFFFF) / float(0x01000000));
}

float2 RandomFloat2(inout uint seed)
{
	return float2(RandomFloat(seed), RandomFloat(seed));
}

float3 RandomFloat3(inout uint seed)
{
	return float3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed));
}

float2 RandomInUnitDisk(inout uint seed)
{
	for (;;)
	{
		const float2 p = 2 * float2(RandomFloat(seed), RandomFloat(seed)) - 1;
		if (dot(p, p) < 1)
		{
			return p;
		}
	}
}

/**
 * Generates a random direction vector within a disk oriented along the given normal.
 */
float3 RandomDirectionInDisk(inout uint seed, float3 normal, float radius)
{
	float2 p;
	float lenSquared;
	do
	{
		p = float2(RandomFloat(seed), RandomFloat(seed)) * 2.0f - 1.0f;
		lenSquared = dot(p, p);
	} while (lenSquared > 1.0f);

	p *= radius;

	// Use a precomputed orthogonal vector if possible
	float3 orthogonalVector = abs(normal.z) < 0.999 ? float3(0, 0, 1) : float3(1, 0, 0);
	float3 tangent = normalize(cross(normal, orthogonalVector));
	float3 bitangent = cross(normal, tangent);

	return normalize(tangent * p.x + bitangent * p.y + normal * sqrt(1.0f - lenSquared));
}

float3 RandomInUnitSphere(inout uint seed)
{
	for (;;)
	{
		const float3 p = 2 * float3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed)) - 1;
		if (dot(p, p) < 1)
		{
			return p;
		}
	}
}

float RandomFloat(inout uint seed, float min, float max)
{
	return RandomFloat(seed) * (max - min) + min;
}

float3 RandomVec3(inout uint seed, float min, float max)
{
	return float3(RandomFloat(seed) * (max - min) + min, RandomFloat(seed) * (max - min) + min, RandomFloat(seed) * (max - min) + min);
}

/*
 * From Nathan Reed's blog at:
 * http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
 */

uint WangHash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

uint Xorshift(uint seed)
{
	// Xorshift algorithm from George Marsaglia's paper
	seed ^= (seed << 13);
	seed ^= (seed >> 17);
	seed ^= (seed << 5);
	return seed;
}

float GetRandomNumber(inout uint seed)
{
	seed = WangHash(seed);
	return float(Xorshift(seed)) * (1.f / 4294967296.f);
}

/**
 * Compute a cosine distributed random direction on the hemisphere about the given (normal) direction.
 */
float3 GetRandomCosineDirectionOnHemisphere(float3 direction, inout uint seed)
{
	// Choose random points on the unit sphere offset along the surface normal
	// to produce a cosine distribution of random directions.
	float a = GetRandomNumber(seed) * 2.0 * PI;
	float z = GetRandomNumber(seed) * 2.f - 1.f;
	float r = sqrt(1.f - z * z);

	float3 p = float3(r * cos(a), r * sin(a), z) + direction;
	return normalize(p);
}

/**
 * Compute a cosine distributed random direction on the hemisphere about the given (normal) direction.
 */
float3 GetRandomCosineDirectionOnHemisphere(float3 direction, float roughness, inout uint seed)
{
	// Choose random points on the unit sphere offset along the surface normal
	// to produce a cosine distribution of random directions.
	float a = GetRandomNumber(seed) * 2.0 * PI;
	float z = GetRandomNumber(seed) * 2.f - 1.f;
	float r = sqrt(1.f - z * z);

	float3 p = float3(r * cos(a), r * sin(a), z) * roughness + direction;
	return normalize(p);
}

//note: normalized random, float=[0, 1]
float PDnrand(float2 n)
{
	return frac(sin(dot(n.xy, float2(12.9898, 78.233f))) * 43758.5453);
}
float2 PDnrand2(float2 n)
{
	return frac(sin(dot(n.xy, float2(12.9898, 78.233f))) * float2(43758.5453, 28001.8384));
}
float3 PDnrand3(float2 n)
{
	return frac(sin(dot(n.xy, float2(12.9898, 78.233f))) * float3(43758.5453, 28001.8384, 50849.4141));
}
float4 PDnrand4(float2 n)
{
	return frac(sin(dot(n.xy, float2(12.9898, 78.233f))) * float4(43758.5453, 28001.8384, 50849.4141, 12996.89));
}

// Convert uniform distribution into triangle-shaped distribution.
// https://www.shadertoy.com/view/4t2SDh
// Input is in range [0, 1]
// Output is in range [-1, 1], which is useful for dithering.
float2 uniformNoiseToTriangular(float2 n)
{
	float2 orig = n * 2.0 - 1.0;
	n = orig * rsqrt(abs(orig));
	n = max(-1.0.xx, n);
	n = n - float2(sign(orig));
	return n;
}