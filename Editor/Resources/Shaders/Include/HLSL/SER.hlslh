#pragma once

#define HLSL_VERSION 660
#include <Raytracing/RaytracingPayload.hlslh>

#if BEY_SER

// SPV_NV_shader_invocation_reorder
// https://htmlpreview.github.io/?https://github.com/KhronosGroup/SPIRV-Registry/blob/master/extensions/NV/SPV_NV_shader_invocation_reorder.html
#define ShaderInvocationReorderNV 5383
#define HitObjectAttributeNV 5385

#define OpHitObjectRecordHitMotionNV 5249
#define OpHitObjectRecordHitWithIndexMotionNV 5250
#define OpHitObjectRecordMissMotionNV 5251
#define OpHitObjectGetWorldToObjectNV 5252
#define OpHitObjectGetObjectToWorldNV 5253
#define OpHitObjectGetObjectRayDirectionNV 5254
#define OpHitObjectGetObjectRayOriginNV 5255
#define OpHitObjectTraceRayMotionNV 5256
#define OpHitObjectGetShaderRecordBufferHandleNV 5257
#define OpHitObjectGetShaderBindingTableRecordIndexNV 5258
#define OpHitObjectRecordEmptyNV 5259
#define OpHitObjectTraceRayNV 5260
#define OpHitObjectRecordHitNV 5261
#define OpHitObjectRecordHitWithIndexNV 5262
#define OpHitObjectRecordMissNV 5263
#define OpHitObjectExecuteShaderNV 5264
#define OpHitObjectGetCurrentTimeNV 5265
#define OpHitObjectGetAttributesNV 5266
#define OpHitObjectGetHitKindNV 5267
#define OpHitObjectGetPrimitiveIndexNV 5268
#define OpHitObjectGetGeometryIndexNV 5269
#define OpHitObjectGetInstanceIdNV 5270
#define OpHitObjectGetInstanceCustomIndexNV 5271
#define OpHitObjectGetWorldRayDirectionNV 5272
#define OpHitObjectGetWorldRayOriginNV 5273
#define OpHitObjectGetRayTMaxNV 5274
#define OpHitObjectGetRayTMinNV 5275
#define OpHitObjectIsEmptyNV 5276
#define OpHitObjectIsHitNV 5277
#define OpHitObjectIsMissNV 5278
#define OpReorderThreadWithHitObjectNV 5279
#define OpReorderThreadWithHintNV 5280
#define OpTypeHitObjectNV 5281

// Definition of the Storage classes
#define RayPayloadKHR 5338
[[vk::ext_storage_class(RayPayloadKHR)]] static RayPackedPayload packedPayload;
[[vk::ext_storage_class(HitObjectAttributeNV)]] static float3 objAttribs;

// Adding capabilities
[[vk::ext_capability(ShaderInvocationReorderNV)]] [[vk::ext_extension("SPV_NV_shader_invocation_reorder")]]

// Pointer to the HitObject: used in parameter declarations
#define HitObjectNV vk::ext_type<HitObjectAttributeNV>
#define RefHitObjectNV [[vk::ext_reference]] HitObjectNV

// Shader Execution Reorder :  Function Declaration

[[vk::ext_type_def(HitObjectAttributeNV, OpTypeHitObjectNV)]] void
createHitObjectNV();

[[vk::ext_type_def(1, RayPayloadKHR)]] void createRayPayloadKHR();

[[vk::ext_instruction(OpHitObjectRecordEmptyNV)]] void hitObjectRecordEmptyNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectTraceRayNV)]] void hitObjectTraceRayNV(RefHitObjectNV hitObject, RaytracingAccelerationStructure as, uint RayFlags, uint CullMask, uint SBTOffset, uint SBTStride,
                                                                        uint MissIndex, float3 RayOrigin, float RayTmin, float3 RayDirection, float RayTMax,
                                                                        [[vk::ext_reference]] [[vk::ext_storage_class(RayPayloadKHR)]] RayPackedPayload packedPayload);

[[vk::ext_instruction(OpReorderThreadWithHintNV)]] void reorderThreadWithHintNV(int Hint, int Bits);

[[vk::ext_instruction(OpReorderThreadWithHitObjectNV)]] void reorderThreadWithHitObjectNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectExecuteShaderNV)]] void hitObjectExecuteShaderNV(RefHitObjectNV hitObject,
                                                                                  [[vk::ext_reference]] [[vk::ext_storage_class(RayPayloadKHR)]] RayPackedPayload packedPayload);

[[vk::ext_instruction(OpHitObjectIsHitNV)]] bool hitObjectIsHitNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetRayTMaxNV)]] float hitObjectGetRayTMaxNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetWorldToObjectNV)]] float4x3 hitObjectGetWorldToObjectNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetObjectToWorldNV)]] float4x3 hitObjectGetObjectToWorldNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetInstanceIdNV)]] int hitObjectGetInstanceIdNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetInstanceCustomIndexNV)]] int hitObjectGetInstanceCustomIndexNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetPrimitiveIndexNV)]] int hitObjectGetPrimitiveIndexNV(RefHitObjectNV hitObject);

[[vk::ext_instruction(OpHitObjectGetAttributesNV)]] void hitObjectGetAttributesNV(RefHitObjectNV hitObject, [[vk::ext_reference]] [[vk::ext_storage_class(HitObjectAttributeNV)]] float3 attribs);

// Function to compute a coherence hint based on multiple factors
int GetCoherenceHint(in float roughness, float metalness, uint depth, float ior)
{
	int hint = 0;

	// Add roughness as a hint (low roughness = more coherent)
	if (roughness < 0.2f) hint |= 1;

	// Add metalness as a hint (metallic surfaces tend to have different shading needs)
	if (metalness > 0.5f) hint |= 2;

	// Add depth as a hint (group by bounce depth)
	if (depth > 2) hint |= 4;

	// Use IOR for hinting (refractive surfaces)
	if (ior > 1.5f) hint |= 8;

	return hint;
}

#endif